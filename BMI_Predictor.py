# -*- coding: utf-8 -*-
"""BMI_Predictor.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_YkFlpc41ytTdmq1J2QT0KcSIsD3oz6w
"""

import pickle

#Visualization libraries
import pandas as pd
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sb
import numpy as np


#Feature engineering and metric
from sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler
from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score
import matplotlib.ticker as mtick
from sklearn.linear_model import BayesianRidge, LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.linear_model import HuberRegressor, LinearRegression
import argparse,importlib,json,logging

class BmiPredictor(object):

    def __init__(self):
      self.filepath = "./Dummy-Data.csv"

    def load_data(self):
      data = pd.read_csv(self.filepath)
      return data

    def preprocess_data(self,data):
      
      data.drop(['AppID','IssueDate'],1,inplace=True)
      
      data['Height_in_cm'] =  data['Ht'].apply(lambda x: self.transform_height(str(x)) )
      data['Weight_in_kg'] =  data['Wt'].apply(lambda x: self.transform_weight(x) )
      
      data.drop(columns=['Ht'],inplace=True)
      data.drop(columns=['Wt'],inplace=True)

      #Lets Calculate BMI by formula [weight (kg) / height (cm) / height (cm)] x 10,000

      data['BMI'] = data['Weight_in_kg']/data['Height_in_cm']/data['Height_in_cm']
      data['BMI'] = data['BMI'] * 10000

      data.rename(columns = {'Ins_Age' : 'Age','Ins_Gender' : 'Gender'},inplace = True)


      data.loc[ ( ((data['Age'] >= 18 ) & (data['Age'] <= 39 ))  & ((data['BMI'] < 17.49 ) | (data['BMI'] > 38.5 )) ), ['Price_Quote','Reason'] ] = "750 USD","Age is between 18 to 39 and BMI is either less than 17.49 or greater than 38.5."
      data.loc[( ((data['Age'] >= 40 ) & (data['Age'] <= 59 ))  & ((data['BMI'] < 18.49 ) | (data['BMI'] > 38.5 )) ), ['Price_Quote','Reason'] ] = "1000 USD","Age is between 40 to 59 and BMI is either less than 18.49 or greater then 38.5."
      data.loc[( (data['Age'] > 60 )   & ((data['BMI'] < 18.49 ) | (data['BMI'] > 45.5 )) ), ['Price_Quote','Reason'] ] = "2000 USD","Age is greater than 60 and BMI is either less than 18.49 or greater than 38.5."



      data.loc[  (data['Gender']=="Female") & ( ((data['Age'] >= 18 ) & (data['Age'] <= 39 ))  & ((data['BMI'] < 17.49 ) | (data['BMI'] > 38.5 )) ), ['Price_Quote','Reason'] ] = "675 USD","Age is between 18 to 39 and BMI is either less than 17.49 or greater than 38.5."
      data.loc[ (data['Gender']=="Female") & ( ((data['Age'] >= 40 ) & (data['Age'] <= 59 ))  & ((data['BMI'] < 18.49 ) | (data['BMI'] > 38.5 )) ), ['Price_Quote','Reason'] ] = "900 USD","Age is between 40 to 59 and BMI is either less than 18.49 or greater then 38.5."
      data.loc[ (data['Gender']=="Female") &  ( (data['Age'] > 60 )   & ((data['BMI'] < 18.49 ) | (data['BMI'] > 45.5 )) ), ['Price_Quote','Reason'] ] = "1800 USD","Age is greater than 60 and BMI is either less than 18.49 or greater than 38.5."

      data.loc[ (data['Gender']=="Female") & (data['Price_Quote'].isna() ), ['Price_Quote','Reason'] ] = "450 USD","BMI is in right range."
      data.loc[ (data['Price_Quote'].isna() ), ['Price_Quote','Reason'] ] = "500 USD","BMI is in right range."


      Numerical_variables = list(data.select_dtypes(include=[np.float64,np.int64]).columns)
      Categorical_variables = list(data.select_dtypes(include=[object]).columns)
      Categorical_variables.remove('Reason')

      sc = StandardScaler()
      data[Numerical_variables] = sc.fit_transform(data[Numerical_variables])

      df = pd.get_dummies(data[Categorical_variables])
      data = pd.concat([data,df],axis=1)
      data.drop(Categorical_variables,1,inplace=True)

      return data


    def transform_height(self,height):
      height_feet = int(height[0])
      height_inch = int(height[1:])  
      height_inch += int(height_feet) * 12
      h_cm = round(height_inch * 2.54, 1)

      return h_cm

    def transform_weight(self,wt_in_pounds):
      wt_in_kg = wt_in_pounds * 0.453592
      return wt_in_kg



    def train_reg(self,X_train, y_train):
     
      reg = HuberRegressor(alpha=0.0001, epsilon=1.35, fit_intercept=True, max_iter=100,
               tol=1e-05, warm_start=False)

      reg.fit(X_train, y_train)
      
      return reg

    def validate_reg(self,model, X, y):
      y_pred = model.predict(X)
      mse = mean_squared_error(y, y_pred)

      return mse

if __name__ == "__main__":

    bmi = BmiPredictor()
    data = bmi.load_data()
    data = bmi.preprocess_data(data)
    #print(data)
    cols = ['Age', 'Height_in_cm', 'Weight_in_kg', 'Gender_Female', 'Gender_Male',
       'Price_Quote_1000 USD', 'Price_Quote_450 USD', 'Price_Quote_500 USD',
       'Price_Quote_675 USD', 'Price_Quote_750 USD', 'Price_Quote_900 USD']

    X = data[cols]
    y = data["BMI"]

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3)

    model = bmi.train_reg(X_train, y_train)

    train_mse = bmi.validate_reg(model, X_train, y_train)
    print("Train MSE: {:.4f}".format(train_mse))

    test_mse = bmi.validate_reg(model, X_test, y_test)
    print("Test MSE: {:.4f}".format(test_mse))

    # save model as a pkl file
    with open('model.pkl','wb') as f:
        pickle.dump(model, f)

    print("Finished Training and saving the pickle of Bmi Predictor Model")

